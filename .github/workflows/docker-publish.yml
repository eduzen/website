name: Docker

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  actions: read

concurrency:
  group: docker-${{ github.ref }}
  cancel-in-progress: true

env:
  IMAGE_NAME: website
  DJANGO_SETTINGS_MODULE: website.settings.prod

jobs:
  lint-dockerfile:
    name: Lint Dockerfile
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile

  push:
    runs-on: ubuntu-latest
    outputs:
      digest:    ${{ steps.docker_build.outputs.digest }}
      platforms: ${{ steps.docker_build.outputs.platforms }}
      tags:      ${{ steps.meta.outputs.tags }}
    needs: lint-dockerfile
    if: github.event_name != 'pull_request'
    steps:
      - name: Validate env vars
        run: |
          [[ -n "${{ secrets.DOCKERHUB_USERNAME }}" ]] || { echo "Missing DOCKERHUB_USERNAME"; exit 1; }
          [[ -n "${{ secrets.DOCKERHUB_TOKEN }}" ]] || { echo "Missing DOCKERHUB_TOKEN"; exit 1; }

      - name: Checkout
        uses: actions/checkout@v5

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            eduzen/website
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Login to DockerHub
        uses: docker/login-action@v3.6.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.11.1
        with:
          buildkitd-flags: --allow-insecure-entitlement network.host

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v6.18.0
        with:
          file: ./Dockerfile
          target: production
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          push: true
          cache-from: type=gha,scope=${{ github.ref_name }}
          cache-to: type=gha,mode=max,scope=${{ github.ref_name }}
          build-args: |
            RELEASE=${{ github.sha }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}

      - name: Print image digest
        run: |
          echo "→ ${{ steps.docker_build.outputs.digest }}"
          {
            echo "### Docker image"
            echo "* Digest: \`${{ steps.docker_build.outputs.digest }}\`"
            echo "* Tags:"
            echo '```'
            echo "${{ steps.meta.outputs.tags }}"
            echo '```'
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: eduzen/website:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        continue-on-error: true
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  notify:
    needs: push
    runs-on: ubuntu-latest
    if: always() && github.event_name != 'pull_request'
    steps:
      - name: Validate Telegram secrets
        run: |
          [[ -n "${{ secrets.TELEGRAM_TOKEN }}" ]] || { echo "Missing TELEGRAM_TOKEN"; exit 1; }
          [[ -n "${{ secrets.TELEGRAM_TO }}" ]] || { echo "Missing TELEGRAM_TO"; exit 1; }

      - name: Send Telegram notification
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_TO: ${{ secrets.TELEGRAM_TO }}
          BUILD_RESULT: ${{ needs.push.result }}
          DIGEST: ${{ needs.push.outputs.digest }}
          TAGS: ${{ needs.push.outputs.tags }}
        run: |
          set -eo pipefail

          if [[ "${BUILD_RESULT}" == "success" ]]; then
            emoji="✅"
            status_line="Docker image pushed successfully."
          else
            emoji="❌"
            status_line="Docker build or push failed."
          fi

          tags_formatted=$(printf '%s\n' "${TAGS}")
          message=$(
            printf '%s\n' "${emoji} ${status_line}"
            printf 'Repository: %s\n' "${{ github.repository }}"
            printf 'Ref: %s\n' "${{ github.ref_name }}"
            printf 'Digest: %s\n' "${DIGEST:-n/a}"
            printf 'Tags:\n'
            if [[ -n "${tags_formatted}" ]]; then
              printf '%s\n' "${tags_formatted}"
            else
              printf 'n/a\n'
            fi
            printf 'Workflow run: https://github.com/%s/actions/runs/%s\n' "${{ github.repository }}" "${{ github.run_id }}"
          )

          response=$(curl -s -w "HTTPSTATUS:%{http_code}" -X POST \
            "https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage" \
            -d chat_id="${TELEGRAM_TO}" \
            -d disable_web_page_preview=true \
            --data-urlencode text="${message}")

          http_code=$(echo "${response}" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          if [[ ${http_code} -lt 200 || ${http_code} -gt 299 ]]; then
            echo "Failed to send Telegram notification (HTTP ${http_code})."
            echo "Response: $(echo "${response}" | sed -e 's/HTTPSTATUS:.*//')"
            exit 1
          fi
          echo "Telegram notification sent."

  release:
    needs: push
    runs-on: ubuntu-latest
    if: needs.push.result == 'success' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
    steps:
      - name: Get today's date (Europe)
        id: date
        run: echo "date=$(date +'%d.%m.%Y')" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "latest-main"
          name: "Latest build on main"
          target_commitish: ${{ github.sha }} # point tag at this commit
          make_latest: true
          body: |
            • Date: ${{ steps.date.outputs.date }}
            • Commit: ${{ github.sha }}
            • Digest: ${{ needs.push.outputs.digest }}
            • Tags:
              ${{ needs.push.outputs.tags }}
