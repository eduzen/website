[{"model": "blog.tag", "pk": 1, "fields": {"word": "nginx", "slug": "nginx"}}, {"model": "blog.tag", "pk": 2, "fields": {"word": "gunicorn", "slug": "gunicorn"}}, {"model": "blog.post", "pk": 1, "fields": {"author": 1, "title": "C\u00f3mo configurar nginx - gunicorn - django", "pompadour": "Una guia para deployment de django", "slug": "nginx-gunicorn-django", "created_date": "2017-01-27", "published_date": "2017-01-27", "text": "<ol><li><p>Para configurar <strong>nginx</strong> es necesario, en primer lugar, crear un archivo espec&iacute;fico para nuestro sitio web, esto es, un archivo de configuraci&oacute;n para nuestro proyecto:</p><p><pre><code>sudo touch /etc/nginx/sites-available/myproject</code></pre><p>&nbsp;</p></li>\r\n<li><p>Luego al editarlo podemos poner una configuraci\u00f3n b&aacute;sica:\r\n\t<pre>\r\n<code>sudo vim /etc/nginx/sites-available/myproject</code>\r\n</pre></p>\r\n<p>\r\n\t<pre>\r\n<code> \r\nserver { \r\n    listen 80; \r\n    server_name www.midominio.com dominio.com 192.168.1.15; \r\n}\r\n</code>\r\n</pre>\r\n</p>\r\n\t<pre>\r\n<code> \t\r\nworker_processes 1;\r\n\r\nuser nobody nogroup;\r\n# &#39;user nobody nobody;&#39; for systems with &#39;nobody&#39; as a group instead\r\npid /tmp/nginx.pid;\r\nerror_log /tmp/nginx.error.log;\r\n\r\nevents {\r\n  worker_connections 1024; # increase if you have lots of clients\r\n  accept_mutex off; # set to &#39;on&#39; if nginx worker_processes &gt; 1\r\n  # &#39;use epoll;&#39; to enable for Linux 2.6+\r\n  # &#39;use kqueue;&#39; to enable for FreeBSD, OSX\r\n}\r\n\r\nhttp {\r\n  include mime.types;\r\n  # fallback in case we can&#39;t determine a type\r\n  default_type application/octet-stream;\r\n  access_log /tmp/nginx.access.log combined;\r\n  sendfile on;\r\n\r\n  upstream app_server {\r\n    # fail_timeout=0 means we always retry an upstream even if it failed\r\n    # to return a good HTTP response\r\n\r\n    # for UNIX domain socket setups\r\n    server unix:/tmp/gunicorn.sock fail_timeout=0;\r\n\r\n    # for a TCP configuration\r\n    # server 192.168.0.7:8000 fail_timeout=0;\r\n  }\r\n\r\n  server {\r\n    # if no Host match, close the connection to prevent host spoofing\r\n    listen 80 default_server;\r\n    return 444;\r\n  }\r\n\r\n  server {\r\n    # use &#39;listen 80 deferred;&#39; for Linux\r\n    # use &#39;listen 80 accept_filter=httpready;&#39; for FreeBSD\r\n    listen 80;\r\n    client_max_body_size 4G;\r\n\r\n    # set the correct host(s) for your site\r\n    server_name example.com www.example.com;\r\n\r\n    keepalive_timeout 5;\r\n\r\n    # path for static files\r\n    root /path/to/app/current/public;\r\n\r\n    location / {\r\n      # checks for static file, if not found proxy to app\r\n      try_files $uri @proxy_to_app;\r\n    }\r\n\r\n    location @proxy_to_app {\r\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\r\n      # enable this if and only if you use HTTPS\r\n      # proxy_set_header X-Forwarded-Proto https;\r\n      proxy_set_header Host $http_host;\r\n      # we don&#39;t want nginx trying to do something clever with\r\n      # redirects, we set the Host: header above already.\r\n      proxy_redirect off;\r\n      proxy_pass http://app_server;\r\n    }\r\n\r\n    error_page 500 502 503 504 /500.html;\r\n    location = /500.html {\r\n      root /path/to/app/current/public;\r\n    }\r\n  }\r\n}\r\n</code>\r\n</pre>\r\n\r\n\t<p>para ver m&aacute;s acerca de esta configuraci&oacute;n<a href=\"https://github.com/benoitc/gunicorn/blob/master/examples/nginx.conf\">nginx.conf</a></p>\r\n\t</li>\r\n\t<li>\r\n\t<p>Crear link simbolico</p>\r\n\r\n\t<pre>\r\n<code>sudo ln -s /etc/nginx/sites-available/myproject /etc/nginx/sites-enabled</code>\r\n</pre>\r\n\t</li>\r\n\t<li>\r\n\t<p>Comandos b&aacute;sicos</p>\r\n\r\n\t<pre>\r\n<code>sudo nginx -t </code></pre>\r\n\r\n\t<pre>\r\n<code>sudo systemctl restart nginx</code></pre>\r\n\t</li>\r\n</ol>", "tags": [1, 2]}}]