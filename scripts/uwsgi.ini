[uwsgi]
# if you want to use it with nginx-proxy and VIRTUAL_PROTO
# but if you dont need a proxy you can use http = 0.0.0.0:80
# socket = 0.0.0.0:80
http-socket=:80
#uid=uwsgi
#gid=uwsgi
chunked-input-timeout=6
ignore-sigpipe=true
auto-procname=true
procname-prefix=eduzen-
# clear environment on exit
vacuum = true
# check sintax error on this file
strict=true
# master uWSGIâ€™s built-in prefork+threading multi-worker management mode
master = true
# allows threading module on python (not only for our code also for third-parties)
enable-threads=true
# accpets kill signal SIGTERM
die-on-term=true
# checks if the app is up
need-app=true
# there are reports on some C extensions that do not cooperate well with multiple interpreters
single-interpreter=true
# logss are super noisy
disable-logging=true
log-4xx=true
log-5xx=true
logformat="%(method) %(uri) %(proto) %(status)" %(user) %(addr) %(uagent) from %(referer)

# Workers (it can be processes and threads but because of GIL is better to go for processes)
# How many? cpu cores * 2 (but it needs to be check by running uwsgitop /tmp/uwsgi-stats.socket)
processes = 2
# restart workers after this many requests
max-requests=5000
# restart worker after this many seconds
max-worker-lifetime=3600
# restart worker after this much of resident memory
reload-on-rss=2048
# How long minutes to wait before forcefully killing workers
worker-reload-mercy=10
# forcefully kill workers after 20 seconds. SIGKILL if the worker doesnt respond
harakiri=20
post-buffering=true
# allow the workers to recieve signals such as signal.alarmm from the OS
# py-call-osafterfork=true
wsgi-disable-file-wrapper=false
# Django-related settings
# the base directory (full path)
chdir=/code/website
# Django's wsgi file
module=website.wsgi
# the virtualenv (full path)
# home=/usr/local/bin/
# Track statistics for easier peformance tuning
#stats = /tmp/uwsgi-stats.socket
#touch-reload = /tmp/reload-uwsgi
